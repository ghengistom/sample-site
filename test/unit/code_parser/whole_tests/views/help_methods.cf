<!-- Copyright (c) 2000 ActivePDF, Inc. -->
<!-- ActivePDF Server 2009 -->
<!-- Example generated 01/01/2000  -->

<!-- Example uses the .NET DLL which requires -->
<!-- Coldfusion 8 or above -->

<CFSCRIPT>
// Get current path
strPath = ExpandPath(".") & "\";

.MethodName("asdf", "##FF9900", 1, 2.0, true);
.AddEmail();
intStartPrinting = .StartPrinting("file.ps", "file.pdf");
if(intStartPrinting != 0) {
  Error("StartPrinting", intStartPrinting);
}
intStartPrinting = .StartPrinting("file.ps", "file.pdf");
if(intStartPrinting < 1) {
  Error("StartPrinting", intStartPrinting);
}
intStartPrinting = .StartPrinting("file.ps", "file.pdf");
if(intStartPrinting > 1) {
  Error("StartPrinting", intStartPrinting);
}
results = .StartPrinting("file.ps", "file.pdf");
if(results.Get_ServerStatus() != "Success") {
  Error("StartPrinting", results, results.Get_ServerStatus());
}
results = .ClosePDF();
if(results.Get_ServerStatus() != "Success") {
  Error("ClosePDF", results, results.Get_ServerStatus());
}
intBeginStartPrinting = .BeginStartPrinting(strPath & "file.ps", strPath & "file.pdf");
if(intBeginStartPrinting != 0) {
  Error("BeginStartPrinting", intBeginStartPrinting);
}
intBeginStartPrinting = .BeginStartPrinting("file.ps", "file.pdf");
if(intBeginStartPrinting < 1) {
  Error("BeginStartPrinting", intBeginStartPrinting);
}
Error("MethodName", VariableName);
ManualResults = .OpenPDF(strPath & "Report.pdf");
if(results.XtractorStatus != XDK.Results.XtractorStatus.Success) {
  Error("OpenPDF", ManualResults, ManualResults.Get_XtractorStatus());
} else {
  ExtractedText = .GetTextByLocation(2, 100, 400, 200);
}
oXMP = .GetXMPManager();
// Set a document property
enumXMPProperty = CreateObject(".NET", "NameSpace.XMPProperty", "c:\folder\path\file.dll");
intSetDocumentProperty = oXMP.SetDocumentProperty(enumXMPProperty.Author, "John Doe");
if(intSetDocumentProperty != 0) {
  Error("SetDocumentProperty", intSetDocumentProperty);
}
enumXMPProperty = CreateObject(".NET", "APToolkitNET.XMPProperty", "c:\folder\path\file.dll");
intSetDocumentProperty = oXMP.SetDocumentProperty(enumXMPProperty.Author, "John Doe");
if(intSetDocumentProperty != 0) {
  Error("SetDocumentProperty", intSetDocumentProperty);
}
enumXMPTest = CreateObject(".NET", "NameSpace.XMPTest", "c:\folder\path\file.dll");
intSetDocumentProperty = oXMP.SetDocumentProperty(enumXMPTest.Author, enumXMPTest.Title);
if(intSetDocumentProperty != 0) {
  Error("SetDocumentProperty", intSetDocumentProperty);
}
oXMP.RemoveDocumentProperty(enumXMPProperty.Author);

// Release Object
oXMP = 0;
oReleaseOne = .MethodObject();

// Release Object
oReleaseOne = 0;
oReleaseTwo = .MethodObject();

// Release Object
oReleaseTwo = 0;
oNoRelease = .MethodObject();
// Process Complete
WriteOutput("Done!");

// Error Handling
Function Error(method, outputCode) {
  WriteOutput("Error in " & method & ": " & outputCode);
}
</CFSCRIPT>